from lapyrinth import Maze as Maze

class UnsolvableMaze(Exception):
    message: str
    def __init__(self, algorithm: str, error_message: str = "") -> None: ...

def left_hand(maze_obj: Maze) -> list[tuple[int, int]]: ...
def right_hand(maze_obj: Maze) -> list[tuple[int, int]]: ...
def random_mouse(maze_obj: Maze) -> list[tuple[int, int]]: ...
def pledge(maze_obj: Maze, following_direction: str) -> list[tuple[int, int]]: ...
def dead_end_filler(maze_obj: Maze) -> list[tuple[int, int]]: ...
def depth_first_search(maze_obj: Maze) -> list[tuple[int, int]]: ...
def breadth_first_search(maze_obj: Maze) -> list[tuple[int, int]]: ...
def greedy_best_first_search(maze_obj: Maze) -> list[tuple[int, int]]: ...
def dijkstra(maze_obj: Maze) -> list[tuple[int, int]]: ...
def a_star(maze_obj: Maze) -> list[tuple[int, int]]: ...
def turn_right(direction: tuple[int, int]) -> tuple[int, int]: ...
def turn_left(direction: tuple[int, int]) -> tuple[int, int]: ...
def update_path(
    path: list[tuple[int, int]], new_cell: tuple[int, int]
) -> list[tuple[int, int]]: ...
def update_cell_directions(
    cell_with_direction: dict[tuple[int, int], list[tuple[int, int]]],
    current_cell: tuple[int, int],
    direction: tuple[int, int],
    algorithm: str,
    error_message: str = "",
) -> None: ...
def get_dead_ends(maze_obj: Maze) -> list[tuple[int, int]]: ...
def directions_to_path(
    maze_obj: Maze, cell_with_directions: dict[tuple[int, int], list[tuple[int, int]]]
) -> list[tuple[int, int]]: ...
def reconstruct_path(
    maze_obj: Maze, came_from: dict[tuple[int, int], tuple[int, int]]
) -> list[tuple[int, int]]: ...
def generate_path(
    maze_obj: Maze, path: list[tuple[int, int]], filename: str | None = None
) -> None: ...
def print_path(maze_obj: Maze, path: list[tuple[int, int]]) -> None: ...
